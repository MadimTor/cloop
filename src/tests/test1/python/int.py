// This file was autogenerated by cloop - Cross Language Object Oriented Programming

from __future__ import annotations
from typing import Union, Any, Optional, ByteString
import sys
import threading
import datetime
from warnings import warn
import ctypes

class IDisposable():
	
	VERSION = 1

	def dispose(self):


class IStatus(IDisposable):
	
	VERSION = 2

	def dispose(self):

	def getCode(self):

	def setCode(self, code):


class IStatusFactory(IDisposable):
	
	VERSION = 2

	def dispose(self):

	def createStatus(self):


class IFactory(IDisposable):
	
	VERSION = 2

	def dispose(self):

	def createStatus(self):

	def createCalculator(self, status):

	def createCalculator2(self, status):

	def createBrokenCalculator(self, status):

	def setStatusFactory(self, statusFactory):


class ICalculator(IDisposable):
	
	VERSION = 4

	def dispose(self):

	def sum(self, status, n1, n2):

	def getMemory(self):

	def setMemory(self, n):

	def sumAndStore(self, status, n1, n2):


class ICalculator2(ICalculator):
	
	VERSION = 6

	def dispose(self):

	def sum(self, status, n1, n2):

	def getMemory(self):

	def setMemory(self, n):

	def sumAndStore(self, status, n1, n2):

	def multiply(self, status, n1, n2):

	def copyMemory(self, calculator):

	def copyMemory2(self, address):

